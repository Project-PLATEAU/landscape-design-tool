//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Packages/com.synesthesias.landscape-design-tool-2/Scripts/Runtime/InputActions/LandscapeInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Landscape2.Runtime
{
    public partial class @LandscapeInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @LandscapeInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""LandscapeInputActions"",
    ""maps"": [
        {
            ""name"": ""CameraMove"",
            ""id"": ""6c44055c-1e86-4691-8401-8004faff279f"",
            ""actions"": [
                {
                    ""name"": ""HorizontalMoveCameraByKeyboard"",
                    ""type"": ""Value"",
                    ""id"": ""065690cd-ff43-4aec-a1e7-2ef6b0b8b366"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD-Key"",
                    ""id"": ""90e42916-ac01-4f7a-af11-8e811bca95c7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2"",
                    ""groups"": """",
                    ""action"": ""HorizontalMoveCameraByKeyboard"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a3dd2bce-84b7-4ec4-83be-a318c04fa4f7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMoveCameraByKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e7cded32-30a4-4441-9319-2f44f1e91749"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMoveCameraByKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""780e53fd-952b-47d1-b572-7c225a6c2eb1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMoveCameraByKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""05845d7e-f207-483e-8c12-7de9f3c1164c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMoveCameraByKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // CameraMove
            m_CameraMove = asset.FindActionMap("CameraMove", throwIfNotFound: true);
            m_CameraMove_HorizontalMoveCameraByKeyboard = m_CameraMove.FindAction("HorizontalMoveCameraByKeyboard", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // CameraMove
        private readonly InputActionMap m_CameraMove;
        private List<ICameraMoveActions> m_CameraMoveActionsCallbackInterfaces = new List<ICameraMoveActions>();
        private readonly InputAction m_CameraMove_HorizontalMoveCameraByKeyboard;
        public struct CameraMoveActions
        {
            private @LandscapeInputActions m_Wrapper;
            public CameraMoveActions(@LandscapeInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @HorizontalMoveCameraByKeyboard => m_Wrapper.m_CameraMove_HorizontalMoveCameraByKeyboard;
            public InputActionMap Get() { return m_Wrapper.m_CameraMove; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraMoveActions set) { return set.Get(); }
            public void AddCallbacks(ICameraMoveActions instance)
            {
                if (instance == null || m_Wrapper.m_CameraMoveActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CameraMoveActionsCallbackInterfaces.Add(instance);
                @HorizontalMoveCameraByKeyboard.started += instance.OnHorizontalMoveCameraByKeyboard;
                @HorizontalMoveCameraByKeyboard.performed += instance.OnHorizontalMoveCameraByKeyboard;
                @HorizontalMoveCameraByKeyboard.canceled += instance.OnHorizontalMoveCameraByKeyboard;
            }

            private void UnregisterCallbacks(ICameraMoveActions instance)
            {
                @HorizontalMoveCameraByKeyboard.started -= instance.OnHorizontalMoveCameraByKeyboard;
                @HorizontalMoveCameraByKeyboard.performed -= instance.OnHorizontalMoveCameraByKeyboard;
                @HorizontalMoveCameraByKeyboard.canceled -= instance.OnHorizontalMoveCameraByKeyboard;
            }

            public void RemoveCallbacks(ICameraMoveActions instance)
            {
                if (m_Wrapper.m_CameraMoveActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICameraMoveActions instance)
            {
                foreach (var item in m_Wrapper.m_CameraMoveActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CameraMoveActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CameraMoveActions @CameraMove => new CameraMoveActions(this);
        public interface ICameraMoveActions
        {
            void OnHorizontalMoveCameraByKeyboard(InputAction.CallbackContext context);
        }
    }
}
